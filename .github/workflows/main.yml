name: CI/CD
 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 
jobs:
  build:
    environment: CI
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
 
      - name: Docker configuration
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
 
      - name: Build frontend
        run: docker build -t andydck/frontend:latest .
 
      - name: Push frontend to Docker
        run: docker push andydck/frontend:latest

  deploy:
    environment: CI
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
         echo "${SSH_PRIVATE_KEY}" > key.pem
         chmod 600 key.pem
         # SSH into the VPS to execute Docker commands
         ssh -o StrictHostKeyChecking=no -i key.pem ${VPS_USERNAME}@${VPS_HOST} << 'EOF'

         # Accès au repo 
         cd ~/new_repo/T-POO-700-BDX_time-manager-frontend/

         # Supprimer les container si besoin
         docker compose down

         # Mettre à jour les fichiers depuis la branche main
         git fetch origin
         git reset --hard origin/main

         # Démarrer les services Docker avec les fichiers à jour
         docker compose up --build -d  # Build et démarrer les services en mode détaché

         # Optional: Wait for the container to start and check the status
         sleep 10  # Give some time for the service to start
         if docker ps | grep "frontend"; then
          echo "Service is up and running!"
         else
          echo "Service failed to start"
          exit 1
         fi
         EOF
